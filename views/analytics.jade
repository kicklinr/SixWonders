extends inc/layout

block content

  // Start Banner
  #banner
    .banner-inner
      .container
        .row
          // Start Header Text
          .col-md-8.header-text
            h1
              strong Your
              |  regional analytics
            p
              | View aggregate satisfaction data about the court system.
          //- .col-lg-4.col-md-4
          //-   img.img-responsive(src='img/3D_Judges_Gavel.jpg', alt='', title='')
          // End Side Image
  section#subscribe.section
    .container
      .row
        .col-lg-12
          .headline
            h1
              strong Map
            p Text here
            center
              #map.map(style='width: 80%; height: 560px;')
            script(type='text/javascript').
              var map = L.map('map').setView([38.6272, -90.4], 10);
              L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
                attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
                maxZoom: 18,
                id: 'hiddeninput.ciehpan8700elsgkg5g2pcdeb',
                accessToken: 'pk.eyJ1IjoiaGlkZGVuaW5wdXQiLCJhIjoiY2llaHBhbm90MDBkenMzbTFiNTAxYXpuZCJ9.Qome22M5eUWQQnxC674IIQ'
              }).addTo(map);
              var mapStyle = {
                "color": "#ff7800",
                "weight": 1,
                "opacity": 0.65
              };

              var averagesString = !{JSON.stringify(averages)};

              var courtLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  for (var i = 0; i < averagesString.length; i++) {
                    if (averagesString[i].municipality == feature.properties.court_name && averagesString[i].feedbacktype == 'court') {
                      var t = averagesString[i].averageexperience / 10;
                      var g = 255 *t;
                      var r = 255 * (1 - t);
                      var b = 0;
                      var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                      return { "color": rgb, "weight": 1, "opacity": 0.65 };
                    }
                  }
                  return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                }
              }).addTo(map);

              var ticketLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  for (var i = 0; i < averagesString.length; i++) {
                    if (averagesString[i].municipality == feature.properties.court_name && averagesString[i].feedbacktype == 'ticket') {
                      var t = averagesString[i].averageexperience / 10;
                      var g = 255 *t;
                      var r = 255 * (1 - t);
                      var b = 0;
                      var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                      return { "color": rgb, "weight": 1, "opacity": 0.65 };
                    }
                  }
                  return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                }
              });

              var whiteDemoLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.white_vehicle_stops_as_percentage;
                  var demographics = feature.properties.demographics_white_percentage;
                  if (mapType = 'stops') {
                    interactions = feature.properties.white_vehicle_stops_as_percentage;
                  } else if (mapType == 'arrests') {
                    interactions = feature.properties.white_arrest_rate;
                  }

                  if (demographics == '' || interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = calculateValue(interactions - demographics);
                  var r = 255 * t * Math.round(t);
                  var b = 255 * (1 - t) * Math.round(1 - t);
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var whiteArrestsLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.white_arrest_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var blackArrestsLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.black_arrest_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var asianArrestsLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.asian_arrest_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var otherArrestsLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.other_arrest_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var hispanicArrestsLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.hispanic_arrest_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var whiteSearchLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.white_search_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var blackSearchLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.black_search_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var asianSearchLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.asian_search_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var otherSearchLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.other_search_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var hispanicSearchLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.hispanic_search_rate;

                  if (interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = Math.min(interactions / 10, 1);
                  var r = 255 * t;
                  var b = 0;
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });              

              var blackDemoLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  var interactions = feature.properties.black_vehicle_stops_as_percentage;
                  var demographics = feature.properties.demographics_black_percentage;
                  if (demographics == '' || interactions == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = calculateValue(interactions - demographics);
                  var r = 255 * t * Math.round(t);
                  var b = 255 * (1 - t) * Math.round(1 - t);
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")";
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var asianDemoLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  if (feature.properties.demographics_asian_percentage == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = calculateValue(feature.properties.asian_vehicle_stops_as_percentage - feature.properties.demographics_asian_percentage);
                  console.log(feature.properties.court_name + ": " + t);

                  var r = 255 * t * Math.round(t);
                  var b = 255 * (1 - t) * Math.round(1 - t);
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")"; 
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });

              var otherDemoLayer = L.geoJson(!{JSON.stringify(geojson)},{
                style: function(feature) {
                  if (feature.properties.demographics_other_percentage == '') return { "color": "#000000", "weight": 1, "opacity": 0.65 };
                  var t = calculateValue(feature.properties.other_vehicle_stops_as_percentage - feature.properties.demographics_other_percentage);
                  console.log(feature.properties.court_name + ": " + t);

                  var r = 255 * t * Math.round(t);
                  var b = 255 * (1 - t) * Math.round(1 - t);
                  var g = 0;
                  var rgb = "rgb(" + Math.floor(r) + ", " + Math.floor(g) + ", " + Math.floor(b) + ")"; 
                  return { "color": rgb, "weight": 1, "opacity": 0.65 };
                }
              });              

              function removeLayers() {
                map.removeLayer(courtLayer);
                map.removeLayer(whiteDemoLayer);
                map.removeLayer(blackDemoLayer);
                map.removeLayer(asianDemoLayer);
                map.removeLayer(ticketLayer);
                map.removeLayer(otherDemoLayer);
                map.removeLayer(whiteArrestsLayer);
                map.removeLayer(blackArrestsLayer);
                map.removeLayer(asianArrestsLayer);
                map.removeLayer(otherArrestsLayer);
                map.removeLayer(whiteSearchLayer);
                map.removeLayer(blackSearchLayer);
                map.removeLayer(asianSearchLayer);
                map.removeLayer(otherSearchLayer);
                map.removeLayer(hispanicSearchLayer);
                map.removeLayer(hispanicArrestsLayer);                
              }

              function calculateValue(t) {
                if (t < -7.5) {
                  return 0;
                } else if (t < -5) {
                  return 0.10;
                } else if(t < -2.5) {
                  return 0.20;
                } else if (t < -1) {
                  return 0.3;
                } else if (t < -.5) {
                  return 0.4;
                } else if (t < .5) {
                  return 0.5;
                } else if (t < 1) {
                  return 0.6;
                } else if (t < 2.5) {
                  return 0.70;
                } else if (t < 5) {
                  return .80;
                } else if (t < 7.5) {
                  return .9;
                } else {
                  return 1;
                }
              }

            P
              strong Survey-based Satisfaction Index: &nbsp;&nbsp;&nbsp;
              | Court 
              input(
                type='radio', 
                name='mapRadio', 
                onClick="removeLayers(); courtLayer.addTo(map);",
                checked
              )
              | &nbsp;&nbsp;
              | Ticket 
              input(
                type='radio', 
                name='mapRadio',
                onClick="removeLayers(); ticketLayer.addTo(map);"
              ) 
              br
              strong Traffic Stops Demographics: &nbsp;&nbsp;&nbsp;
              | White 
              input(
                type='radio', 
                name='mapRadio',
                onClick="removeLayers(); whiteDemoLayer.addTo(map);"
              )
              | &nbsp;&nbsp;
              | Black 
              input(
                type='radio', 
                name='mapRadio',
                onClick="removeLayers(); blackDemoLayer.addTo(map);"
              )
              | &nbsp;&nbsp;
              | Asian 
              input(
                type='radio', 
                name='mapRadio',
                onClick="removeLayers(); asianDemoLayer.addTo(map);"
              )
              | &nbsp;&nbsp;
              | Other 
              input(
                type='radio', 
                name='mapRadio',
                onClick="removeLayers(); otherDemoLayer.addTo(map);"
              )
              br
              strong Arrest Demographics:  &nbsp;&nbsp;&nbsp; 
              | White 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); whiteArrestsLayer.addTo(map);"
              )
              | &nbsp;&nbsp;
              | Black 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); blackArrestsLayer.addTo(map);"
              )  
              | &nbsp;&nbsp;             
              | Asian 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); asianArrestsLayer.addTo(map);"
              )
              | &nbsp;&nbsp;             
              | Hispanic 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); hispanicArrestsLayer.addTo(map);"
              )                
              | &nbsp;&nbsp;
              | Other 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); otherArrestsLayer.addTo(map);"
              ) 
              br
              strong Search Demographics:  &nbsp;&nbsp;&nbsp; 
              | White 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); whiteSearchLayer.addTo(map);"
              )
              | &nbsp;&nbsp;
              | Black 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); blackSearchLayer.addTo(map);"
              )  
              | &nbsp;&nbsp;             
              | Asian 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); asianSearchLayer.addTo(map);"
              ) 
              | &nbsp;&nbsp;             
              | Hispanic 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); hispanicSearchLayer.addTo(map);"
              )                
              | &nbsp;&nbsp;
              | Other 
              input(
                type='radio',
                name='mapRadio',
                onClick="removeLayers(); otherSearchLayer.addTo(map);"
              )                                      
      .row
        .col-lg-12.text-center
          a.btn.btn-primary.btn-lg.btn-bluebg(href='/search') Back
          a.btn.btn-default.btn-lg.btn-bluenobg(href='#') Help
    